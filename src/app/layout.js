import localFont from "next/font/local";
import "./globals.css";
import { PrismicPreview } from "@prismicio/next";
import { repositoryName } from "@/prismicio";
import { createClient } from "@/prismicio";
import { components } from "@/slices";
import { client } from "@prismicio/client";
import { SliceZone } from "@prismicio/react";
import { getLocales } from "@/lib/getLocales";
import * as prismic from "@prismicio/client";
import { PrismicNextLink } from "@prismicio/next";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "nextjs one page website!",
  description: "Generated by create next app",
};

const localeLabels = {
  "en-us": "EN",
  "fr-fr": "FR",
};

export default async function RootLayout({ children, params }) {

  const client = createClient();
  const home = await client.getSingle("home", { lang: params.lang });
  const locales = await getLocales(home, client);

  return (
    <html lang="en">
      <body
      className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Navbar locales={locales} />
              {locales.map((locale) => (
        <li key={locale.lang} className="first:font-semibold">
          <PrismicNextLink
            locales={locales}
            href={locale.url}
            locale={locale.lang}
            // aria-label={`Change language to ${navigation.data.lang.lang}`}
            >
            {localeLabels[locale.lang] || locale.lang}
            </PrismicNextLink>
            </li>
          ))}

        {children}
        <PrismicPreview repositoryName={repositoryName} />
      </body>
    </html>
  );
}

export async function Navbar() {

  const client = createClient();
  const navigation = await client.getSingle("navigation");

  return (
    <div>
      <SliceZone slices={navigation.data.slices} components={components} />
    </div>
  )
}

export async function generateStaticParams() {
  const client = createClient();

  const pages = await client.getAllByType("page", {
    lang: "*",
    filters: [prismic.filter.at("my.navigation.uid", "navigation")],
  });

  return pages.map((page) => {
    return {
      lang: page.lang,
    };
  });
}